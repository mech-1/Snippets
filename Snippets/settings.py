"""
Django settings for Snippets project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from django.contrib.messages import constants as messages_constants

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '#%3rmpy6hb52y7j^tu7g*v$762rc0&f+26yy3x!j&+@s4(ndq@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'MainApp',
    'django_extensions',
]

if DEBUG:
    INSTALLED_APPS.insert(0, 'debug_toolbar')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    MIDDLEWARE.insert(4, 'debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'Snippets.urls'
MESSAGE_LEVEL = messages_constants.DEBUG

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Snippets.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
if os.environ.get('DATABASE_URL'):
    # production - PostgreSQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('DB_NAME', 'snippets'),
            'USER': os.environ.get('DB_USER', 'snippets_user'),
            'PASSWORD': os.environ.get('DB_PASSWORD', ''),
            'HOST': os.environ.get('DB_HOST', ''),
            'PORT': os.environ.get('DB_PORT', '5432'),
            'OPTIONS': {
                'sslmode': 'require',
            },
        }
    }
else:
    # Разработка - SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

INTERNAL_IPS = [
   '127.0.0.1',
]
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # Не отключаем существующие логгеры
#
#     'formatters': {
#         'sql_formatter': {
#             'format': '{levelname} {message} (Duration: {duration:.3f}s)',  # Формат для SQL
#             'style': '{',
#         },
#     },
#
#     'handlers': {
#         'console_sql': {  # Отдельный обработчик для SQL-запросов
#             'class': 'logging.StreamHandler',
#             'formatter': 'sql_formatter',
#             'level': 'DEBUG',
#         },
#     },
#
#     'loggers': {
#         'django.db.backends': {
#             'handlers': ['console_sql'],  # Используем наш специальный обработчик
#             'level': 'DEBUG',  # Уровень DEBUG для отображения всех запросов
#             'propagate': False,  # Очень важно: отключаем всплытие, чтобы SQL не дублировался другими логгерами
#         },
#     }
# }

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False, # Важно: если у вас уже есть логгеры, это позволит их не отключать
#
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#
#     'handlers': {
#         'file': {
#             'level': 'INFO', # Уровень логирования (DEBUG, INFO, WARNING, ERROR, CRITICAL)
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': BASE_DIR / 'django_debug.log', # Путь к файлу логов
#             'maxBytes': 1024 * 1024 * 5,  # 5 MB
#             'backupCount': 5,             # Keep up to 5 files
#             'formatter': 'verbose',
#         },
#         # Вы можете добавить другие обработчики, например, для вывода в консоль:
#         # 'console': {
#         #     'level': 'INFO',
#         #     'class': 'logging.StreamHandler',
#         #     'formatter': 'simple',
#         # },
#     },
#
#     'loggers': {
#         'django': {
#             'handlers': ['file'], # Используем наш обработчик 'file'
#             'level': 'INFO',     # Уровень логирования для логгера 'django'
#             'propagate': False,  # Важно: предотвращает двойное логирование
#         },
#         # Вы можете добавить собственный логгер для вашего приложения:
#         'MainApp': { # Замените 'myapp' на имя вашего приложения
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': False,
#         },
#     },
# }
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
# STATICFILES_DIRS = [
#   BASE_DIR / "static"
# ]
STATIC_ROOT = BASE_DIR / "staticfiles"

# Static for deployment on Render.com
if not DEBUG:
    MIDDLEWARE.insert(2, 'whitenoise.middleware.WhiteNoiseMiddleware')
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Django Extensions Shell Plus Configuration
SHELL_PLUS_PRE_IMPORTS = [
    ('MainApp.factories', ('UserFactory', 'TagFactory', 'SnippetFactory', 'CommentFactory')),
]

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # или ваш SMTP сервер
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'
